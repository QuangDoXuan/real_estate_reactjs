{"ast":null,"code":"import client from '../utils/client-utils';\nimport stringUtils from '../resources/stringUtils';\nimport constants from '../resources/strings';\nimport datacacheProvider from './datacache-provider';\nimport clientUtils from '../utils/client-utils';\n\nvar md5 = require('md5');\n\nexport default {\n  getAccountStorage() {\n    var user = datacacheProvider.read(\"\", constants.key.storage.current_account);\n    return user;\n  },\n\n  saveAccountStorage(account) {\n    return datacacheProvider.save(\"\", constants.key.storage.current_account, account);\n  },\n\n  xx() {\n    client.serverApi = \"\";\n  },\n\n  login(email, password) {\n    let object = {\n      email,\n      password: password\n    };\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"post\", constants.api.user.login, object).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  // loginx(email,password){\n  //     let parameter = {\n  //         email,\n  //         password:password\n  //     }\n  //     return new Promise((resolve, reject)=>{\n  //         clientUtils.requestApi(\"post\", constants.api.user.login, parameter).then(x=>{\n  //             resolve(x)\n  //         }).catch(e=>{\n  //             reject(e)\n  //         })\n  //     })\n  // },\n  search(param) {\n    let parameters = (param.page ? '?page=' + param.page : '?page=' + -1) + (param.size ? '&size=' + param.size : '&size=' + -1) + (param.queryString ? '&queryString=' + param.queryString : '') + (param.active ? '&active=' + param.active : '&active=' + -1) + (param.specialistId ? '&specialistId=' + param.specialistId : '&specialistId=' + -1) + (param.type ? '&type=' + param.type : '&type=' + -1) + (param.roleId ? '&roleId=' + param.roleId : '&roleId=' + -1) + (param.style ? '&style=' + param.style : '&style=' + -1);\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"get\", constants.api.user.search + parameters, {}).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  updatePassword(id, object) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"put\", constants.api.user.updatePassword + \"/\" + id, object).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  create(object) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"post\", constants.api.user.create, object).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  update(id, object) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"put\", constants.api.user.update + \"/\" + id, object).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  block(id, object) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"put\", constants.api.user.block + \"/\" + id, object).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  active(id, object) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"put\", constants.api.user.active + \"/\" + id, object).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  getDetail(id) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"get\", constants.api.user.detail + \"/\" + id).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  register(object) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"post\", constants.api.user.register, object).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  confirmOtpMessage(id, object) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"post\", constants.api.user.confirm_otp + id, object).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  forgetPassword(object) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"put\", constants.api.user.forgetPassword, object).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  refreshPassword(object) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"put\", constants.api.user.refreshPass, object).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  updatePass(id, object) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"put\", constants.api.user.updatePass + id, object).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n};","map":{"version":3,"sources":["/home/quang/code/land-project-react/src/data-access/user-provider.js"],"names":["client","stringUtils","constants","datacacheProvider","clientUtils","md5","require","getAccountStorage","user","read","key","storage","current_account","saveAccountStorage","account","save","xx","serverApi","login","email","password","object","Promise","resolve","reject","requestApi","api","then","x","catch","e","search","param","parameters","page","size","queryString","active","specialistId","type","roleId","style","updatePassword","id","create","update","block","getDetail","detail","register","confirmOtpMessage","confirm_otp","forgetPassword","refreshPassword","refreshPass","updatePass"],"mappings":"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","sourcesContent":["import client from '../utils/client-utils';\nimport stringUtils from '../resources/stringUtils';\nimport constants from '../resources/strings';\nimport datacacheProvider from './datacache-provider';\nimport clientUtils from '../utils/client-utils';\n\nvar md5 = require('md5');\nexport default {\n    getAccountStorage() {\n        var user = datacacheProvider.read(\"\", constants.key.storage.current_account);\n        return user;\n    },\n    saveAccountStorage(account) {\n        return datacacheProvider.save(\"\", constants.key.storage.current_account, account);\n    },\n    xx() {\n        client.serverApi = \"\";\n    },\n    login(email, password) {\n        let object = {\n            email,\n            password: password,\n        }\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"post\", constants.api.user.login, object).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        });\n    },\n    // loginx(email,password){\n    //     let parameter = {\n    //         email,\n    //         password:password\n    //     }\n    //     return new Promise((resolve, reject)=>{\n    //         clientUtils.requestApi(\"post\", constants.api.user.login, parameter).then(x=>{\n    //             resolve(x)\n    //         }).catch(e=>{\n    //             reject(e)\n    //         })\n    //     })\n    // },\n    search(param) {\n        let parameters =\n            (param.page ? '?page=' + param.page : '?page=' + -1) +\n            (param.size ? '&size=' + param.size : '&size=' + - 1) +\n            (param.queryString ? '&queryString=' + param.queryString : '') +\n            (param.active ? '&active=' + param.active : '&active=' + - 1) +\n            (param.specialistId ? '&specialistId=' + param.specialistId : '&specialistId=' + - 1) +\n            (param.type ? '&type=' + param.type : '&type=' + - 1) +\n            (param.roleId ? '&roleId=' + param.roleId : '&roleId=' + - 1) +\n            (param.style ? '&style=' + param.style : '&style=' + - 1)\n\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"get\", constants.api.user.search + parameters, {}).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        })\n    },\n    updatePassword(id, object) {\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"put\", constants.api.user.updatePassword + \"/\" + id, object).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        });\n    },\n    create(object) {\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"post\", constants.api.user.create, object).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        });\n    },\n    update(id, object) {\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"put\", constants.api.user.update + \"/\" + id, object).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        });\n    },\n    block(id, object) {\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"put\", constants.api.user.block + \"/\" + id, object).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        });\n    },\n    active(id, object) {\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"put\", constants.api.user.active + \"/\" + id, object).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        });\n    },\n    getDetail(id) {\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"get\", constants.api.user.detail + \"/\" + id).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        });\n    },\n    register(object) {\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"post\", constants.api.user.register, object).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        });\n    },\n    confirmOtpMessage(id, object) {\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"post\", constants.api.user.confirm_otp + id, object).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        })\n    },\n    forgetPassword(object) {\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"put\", constants.api.user.forgetPassword, object).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        })\n    },\n    refreshPassword(object) {\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"put\", constants.api.user.refreshPass , object).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        })\n    },\n    updatePass(id,object){\n        return new Promise((resolve,reject)=>{\n            clientUtils.requestApi(\"put\",constants.api.user.updatePass + id, object).then(x=>{\n                resolve(x);\n            }).catch(e=>{\n                reject(e)\n            })\n        })\n    }\n}   "]},"metadata":{},"sourceType":"module"}