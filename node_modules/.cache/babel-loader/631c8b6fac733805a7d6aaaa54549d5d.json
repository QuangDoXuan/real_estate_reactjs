{"ast":null,"code":"/**\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at.\r\n *\r\n *      Http://www.apache.org/licenses/LICENSE-2.0.\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\r\n * dynamically using\r\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\r\n * It works by dynamically creating and appending a script node to the the\r\n * document head and wrapping the callback function so as to return a promise.\r\n *\r\n * ```\r\n * const loader = new Loader({\r\n *   apiKey: \"\",\r\n *   version: \"weekly\",\r\n *   libraries: [\"places\"]\r\n * });\r\n *\r\n * loader.load().then(() => {\r\n *   const map = new google.maps.Map(...)\r\n * })\r\n * ```\r\n */\nvar Loader =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\r\n   * using this library, instead the defaults are set by the Google Maps\r\n   * JavaScript API server.\r\n   *\r\n   * ```\r\n   * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\r\n   * ```\r\n   */\n  function Loader(_a) {\n    var apiKey = _a.apiKey,\n        channel = _a.channel,\n        _b = _a.id,\n        id = _b === void 0 ? \"__googleMapsScriptId\" : _b,\n        _c = _a.libraries,\n        libraries = _c === void 0 ? [] : _c,\n        language = _a.language,\n        region = _a.region,\n        version = _a.version,\n        mapIds = _a.mapIds,\n        nonce = _a.nonce,\n        _d = _a.url,\n        url = _d === void 0 ? \"https://maps.googleapis.com/maps/api/js\" : _d;\n    this.CALLBACK = \"__googleMapsCallback\";\n    this.callbacks = [];\n    this.done = false;\n    this.loading = false;\n    this.version = version;\n    this.apiKey = apiKey;\n    this.channel = channel;\n    this.id = id;\n    this.libraries = libraries;\n    this.language = language;\n    this.region = region;\n    this.mapIds = mapIds;\n    this.nonce = nonce;\n    this.url = url;\n  }\n  /**\r\n   * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\r\n   *\r\n   * @ignore\r\n   */\n\n\n  Loader.prototype.createUrl = function () {\n    var url = this.url;\n    url += \"?callback=\" + this.CALLBACK;\n\n    if (this.apiKey) {\n      url += \"&key=\" + this.apiKey;\n    }\n\n    if (this.channel) {\n      url += \"&channel=\" + this.channel;\n    }\n\n    if (this.libraries.length > 0) {\n      url += \"&libraries=\" + this.libraries.join(\",\");\n    }\n\n    if (this.language) {\n      url += \"&language=\" + this.language;\n    }\n\n    if (this.region) {\n      url += \"&region=\" + this.region;\n    }\n\n    if (this.version) {\n      url += \"&v=\" + this.version;\n    }\n\n    if (this.mapIds) {\n      url += \"&map_ids=\" + this.mapIds.join(\",\");\n    }\n\n    return url;\n  };\n  /**\r\n   * Load the Google Maps JavaScript API script and return a Promise.\r\n   */\n\n\n  Loader.prototype.load = function () {\n    return this.loadPromise();\n  };\n  /**\r\n   * Load the Google Maps JavaScript API script and return a Promise.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  Loader.prototype.loadPromise = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.loadCallback(function (err) {\n        if (!err) {\n          resolve();\n        } else {\n          reject(err);\n        }\n      });\n    });\n  };\n  /**\r\n   * Load the Google Maps JavaScript API script with a callback.\r\n   */\n\n\n  Loader.prototype.loadCallback = function (fn) {\n    this.callbacks.push(fn);\n    this.execute();\n  };\n  /**\r\n   * Set the script on document.\r\n   */\n\n\n  Loader.prototype.setScript = function () {\n    if (this.id && document.getElementById(this.id)) {\n      this.callback();\n      return;\n    }\n\n    var url = this.createUrl();\n    var script = document.createElement(\"script\");\n    script.id = this.id;\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.onerror = this.loadErrorCallback.bind(this);\n    script.defer = true;\n    script.async = true;\n\n    if (this.nonce) {\n      script.nonce = this.nonce;\n    }\n\n    document.head.appendChild(script);\n  };\n\n  Loader.prototype.loadErrorCallback = function (e) {\n    this.onerrorEvent = e;\n    this.callback();\n  };\n\n  Loader.prototype.setCallback = function () {\n    window.__googleMapsCallback = this.callback.bind(this);\n  };\n\n  Loader.prototype.callback = function () {\n    var _this = this;\n\n    this.done = true;\n    this.loading = false;\n    this.callbacks.forEach(function (cb) {\n      cb(_this.onerrorEvent);\n    });\n    this.callbacks = [];\n  };\n\n  Loader.prototype.execute = function () {\n    if (this.done) {\n      this.callback();\n    } else {\n      if (this.loading) ;else {\n        this.loading = true;\n        this.setCallback();\n        this.setScript();\n      }\n    }\n  };\n\n  return Loader;\n}();\n\nexport { Loader };","map":null,"metadata":{},"sourceType":"module"}