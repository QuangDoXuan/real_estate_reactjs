{"ast":null,"code":"import client from '../utils/client-utils';\nimport stringUtils from '../resources/stringUtils';\nimport constants from '../resources/strings';\nimport datacacheProvider from './datacache-provider';\nimport clientUtils from '../utils/client-utils';\n\nvar md5 = require('md5');\n\nexport default {\n  getByPage(param) {\n    let parameters = (param.pagesize ? '?pagesize=' + param.pagesize : '?pagesize=' + 10) + (param.pagenumber ? '&pagenumber=' + param.pagenumber : '&pagenumber=' + -0);\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"get\", constants.api.news.getByPage + parameters, {}).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  getAll() {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi(\"get\", constants.api.news.getAll, {}).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  createNew(param) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi('post', constants.api.news.create, param).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  },\n\n  deleteNew(id) {\n    return new Promise((resolve, reject) => {\n      clientUtils.requestApi('delete', constants.api.news.delete + \"?NewId=\" + id).then(x => {\n        resolve(x);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n};","map":{"version":3,"sources":["/home/quang/code/MTA_PROJECT_BACHELOR/real_estate_reactjs/src/data-access/news-provider.js"],"names":["client","stringUtils","constants","datacacheProvider","clientUtils","md5","require","getByPage","param","parameters","pagesize","pagenumber","Promise","resolve","reject","requestApi","api","news","then","x","catch","e","getAll","createNew","create","deleteNew","id","delete"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,eAAe;AAEXC,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,QAAIC,UAAU,GACV,CAACD,KAAK,CAACE,QAAN,GAAiB,eAAeF,KAAK,CAACE,QAAtC,GAAiD,eAAe,EAAjE,KACCF,KAAK,CAACG,UAAN,GAAmB,iBAAiBH,KAAK,CAACG,UAA1C,GAAuD,iBAAiB,CAAE,CAD3E,CADJ;AAGA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCV,MAAAA,WAAW,CAACW,UAAZ,CAAuB,KAAvB,EAA8Bb,SAAS,CAACc,GAAV,CAAcC,IAAd,CAAmBV,SAAnB,GAA+BE,UAA7D,EAAyE,EAAzE,EAA6ES,IAA7E,CAAkFC,CAAC,IAAI;AACnFN,QAAAA,OAAO,CAACM,CAAD,CAAP;AACH,OAFD,EAEGC,KAFH,CAESC,CAAC,IAAI;AACVP,QAAAA,MAAM,CAACO,CAAD,CAAN;AACH,OAJD;AAKH,KANM,CAAP;AAOH,GAbU;;AAeXC,EAAAA,MAAM,GAAG;AACL,WAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCV,MAAAA,WAAW,CAACW,UAAZ,CAAuB,KAAvB,EAA8Bb,SAAS,CAACc,GAAV,CAAcC,IAAd,CAAmBK,MAAjD,EAAyD,EAAzD,EAA6DJ,IAA7D,CAAkEC,CAAC,IAAI;AACnEN,QAAAA,OAAO,CAACM,CAAD,CAAP;AACH,OAFD,EAEGC,KAFH,CAESC,CAAC,IAAI;AACVP,QAAAA,MAAM,CAACO,CAAD,CAAN;AACH,OAJD;AAKH,KANM,CAAP;AAOH,GAvBU;;AAyBXE,EAAAA,SAAS,CAACf,KAAD,EAAO;AACZ,WAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AACjCV,MAAAA,WAAW,CAACW,UAAZ,CAAuB,MAAvB,EAA8Bb,SAAS,CAACc,GAAV,CAAcC,IAAd,CAAmBO,MAAjD,EAAwDhB,KAAxD,EAA+DU,IAA/D,CAAoEC,CAAC,IAAE;AACnEN,QAAAA,OAAO,CAACM,CAAD,CAAP;AACH,OAFD,EAEGC,KAFH,CAESC,CAAC,IAAE;AACRP,QAAAA,MAAM,CAACO,CAAD,CAAN;AACH,OAJD;AAKH,KANM,CAAP;AAOH,GAjCU;;AAmCXI,EAAAA,SAAS,CAACC,EAAD,EAAI;AACT,WAAO,IAAId,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AACjCV,MAAAA,WAAW,CAACW,UAAZ,CAAuB,QAAvB,EAAgCb,SAAS,CAACc,GAAV,CAAcC,IAAd,CAAmBU,MAAnB,GAA0B,SAA1B,GAAoCD,EAApE,EAAwER,IAAxE,CAA6EC,CAAC,IAAE;AAC5EN,QAAAA,OAAO,CAACM,CAAD,CAAP;AACH,OAFD,EAEGC,KAFH,CAESC,CAAC,IAAE;AACRP,QAAAA,MAAM,CAACO,CAAD,CAAN;AACH,OAJD;AAKH,KANM,CAAP;AAOH;;AA3CU,CAAf","sourcesContent":["import client from '../utils/client-utils';\nimport stringUtils from '../resources/stringUtils';\nimport constants from '../resources/strings';\nimport datacacheProvider from './datacache-provider';\nimport clientUtils from '../utils/client-utils';\n\nvar md5 = require('md5');\nexport default {\n\n    getByPage(param) {\n        let parameters =\n            (param.pagesize ? '?pagesize=' + param.pagesize : '?pagesize=' + 10) +\n            (param.pagenumber ? '&pagenumber=' + param.pagenumber : '&pagenumber=' + - 0)\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"get\", constants.api.news.getByPage + parameters, {}).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        })\n    },\n\n    getAll() {\n        return new Promise((resolve, reject) => {\n            clientUtils.requestApi(\"get\", constants.api.news.getAll ,{}).then(x => {\n                resolve(x);\n            }).catch(e => {\n                reject(e);\n            })\n        });\n    },\n\n    createNew(param){\n        return new Promise((resolve,reject)=>{\n            clientUtils.requestApi('post',constants.api.news.create,param).then(x=>{\n                resolve(x)\n            }).catch(e=>{\n                reject(e)\n            })\n        })\n    },\n\n    deleteNew(id){\n        return new Promise((resolve,reject)=>{\n            clientUtils.requestApi('delete',constants.api.news.delete+\"?NewId=\"+id).then(x=>{\n                resolve(x)\n            }).catch(e=>{\n                reject(e)\n            })\n        })\n    }\n\n\n}   "]},"metadata":{},"sourceType":"module"}